<?php

/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */
 

  namespace Org\Gedcomx\Common {

    // A set of data that supports extension elements.
    class ExtensibleData  {
    
    

      // constructs a ExtensibleData from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this ExtensibleData
      public function toArray() {
        $a = array();
        return $a;
      }
      
      // the json (string form) for this ExtensibleData
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this ExtensibleData with a json hash
      public function initFromArray($o) {
      }
    
    }
    
  }


  namespace Org\Gedcomx\Common {

    // A generic reference to a resource.
    class ResourceReference  {
    
      // The fragment id of the resource being referenced.
      var $resourceId;
      // The URI to the resource.
      var $resource;
    

      // constructs a ResourceReference from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this ResourceReference
      public function toArray() {
        $a = array();
        if( $this->resourceId ) {
          $a["resourceId"] = $this->resourceId;
        }
        if( $this->resource ) {
          $a["resource"] = $this->resource;
        }
        return $a;
      }
      
      // the json (string form) for this ResourceReference
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this ResourceReference with a json hash
      public function initFromArray($o) {
        if( isset($o['resourceId']) ) {
          $this->resourceId = $o["resourceId"];
        }
        if( isset($o['resource']) ) {
          $this->resource = $o["resource"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Agent {

    // An online account for a web application.
    class OnlineAccount  {
    
    
      // The name associated the holder of this account with the account.
      var $accountName;
      // The homepage of the service that provides this account.
      var $serviceHomepage;

      // constructs a OnlineAccount from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this OnlineAccount
      public function toArray() {
        $a = array();
        if( $this->accountName ) {
          $a["accountName"] = $this->accountName;
        }
        if( $this->serviceHomepage ) {
          $a["serviceHomepage"] = $this->serviceHomepage->toArray();
        }
        return $a;
      }
      
      // the json (string form) for this OnlineAccount
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this OnlineAccount with a json hash
      public function initFromArray($o) {
        if( isset($o['accountName']) ) {
          $this->accountName = $o["accountName"];
        }
        if( isset($o['serviceHomepage']) ) {
          $this->serviceHomepage = new \Org\Gedcomx\Common\ResourceReference($o["serviceHomepage"]);
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // An identifier for a resource.
    class Identifier  {
    
      // The type of the id.
      var $type;
    
      // The id value.
      var $value;

      // constructs a Identifier from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Identifier
      public function toArray() {
        $a = array();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        return $a;
      }
      
      // the json (string form) for this Identifier
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this Identifier with a json hash
      public function initFromArray($o) {
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Common {

    // An element representing a text value that may be in a specific language.
    class TextValue  {
    
      // The language of the text value.
      var $lang;
    
      // The text value.
      var $value;

      // constructs a TextValue from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this TextValue
      public function toArray() {
        $a = array();
        if( $this->lang ) {
          $a["lang"] = $this->lang;
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        return $a;
      }
      
      // the json (string form) for this TextValue
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this TextValue with a json hash
      public function initFromArray($o) {
        if( isset($o['lang']) ) {
          $this->lang = $o["lang"];
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Links {

    // A hypermedia link, used to drive the state of a hypermedia-enabled genealogical data application.
    class Link  {
    
      // The language of the resource being linked to.
      var $hreflang;
      // A URI template per &lt;a href=&quot;http://tools.ietf.org/html/rfc6570&quot;&gt;RFC 6570&lt;/a&gt;, used to link to a range of
      // URIs, such as for the purpose of linking to a query.
      var $template;
      // Human-readable information about the link.
      var $title;
      // Metadata about the available media type(s) of the resource being linked to.
      var $allow;
      // Metadata about the available media type(s) of the resource being linked to.
      var $accept;
      // The link relationship.
      var $rel;
      // Metadata about the available media type(s) of the resource being linked to.
      var $type;
      // The target IRI of the link.
      var $href;
    

      // constructs a Link from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Link
      public function toArray() {
        $a = array();
        if( $this->hreflang ) {
          $a["hreflang"] = $this->hreflang;
        }
        if( $this->template ) {
          $a["template"] = $this->template;
        }
        if( $this->title ) {
          $a["title"] = $this->title;
        }
        if( $this->allow ) {
          $a["allow"] = $this->allow;
        }
        if( $this->accept ) {
          $a["accept"] = $this->accept;
        }
        if( $this->rel ) {
          $a["rel"] = $this->rel;
        }
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->href ) {
          $a["href"] = $this->href;
        }
        return $a;
      }
      
      // the json (string form) for this Link
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this Link with a json hash
      public function initFromArray($o) {
        if( isset($o['hreflang']) ) {
          $this->hreflang = $o["hreflang"];
        }
        if( isset($o['template']) ) {
          $this->template = $o["template"];
        }
        if( isset($o['title']) ) {
          $this->title = $o["title"];
        }
        if( isset($o['allow']) ) {
          $this->allow = $o["allow"];
        }
        if( isset($o['accept']) ) {
          $this->accept = $o["accept"];
        }
        if( isset($o['rel']) ) {
          $this->rel = $o["rel"];
        }
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['href']) ) {
          $this->href = $o["href"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Source {

    // Represents a source citation.
    class SourceCitation  {
    
      // The language of the note.
      var $lang;
    
      // A reference to the citation template for this citation.
      var $citationTemplate;
      // The list of citation fields.
      var $fields;
      // A rendering (as a string) of a source citation.  This rendering should be the most complete rendering available.
      var $value;

      // constructs a SourceCitation from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this SourceCitation
      public function toArray() {
        $a = array();
        if( $this->lang ) {
          $a["lang"] = $this->lang;
        }
        if( $this->citationTemplate ) {
          $a["citationTemplate"] = $this->citationTemplate->toArray();
        }
        if( $this->fields ) {
          $ab = array();
          foreach( $this->fields as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['fields'] = $ab;
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        return $a;
      }
      
      // the json (string form) for this SourceCitation
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this SourceCitation with a json hash
      public function initFromArray($o) {
        if( isset($o['lang']) ) {
          $this->lang = $o["lang"];
        }
        if( isset($o['citationTemplate']) ) {
          $this->citationTemplate = new \Org\Gedcomx\Common\ResourceReference($o["citationTemplate"]);
        }
        $this->fields = array();
        if( isset($o['fields']) ) {
          foreach( $o['fields'] as $i => $x ) {
            $this->fields[$i] = new \Org\Gedcomx\Source\CitationField($x);
          }
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Atom {

    // 
    class Content  {
    
      // The type of the content.
      var $type;
    
      // The genealogical data associated with this entry.
      var $gedcomx;

      // constructs a Content from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Content
      public function toArray() {
        $a = array();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->gedcomx ) {
          $a["gedcomx"] = $this->gedcomx->toArray();
        }
        return $a;
      }
      
      // the json (string form) for this Content
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this Content with a json hash
      public function initFromArray($o) {
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['gedcomx']) ) {
          $this->gedcomx = new \Org\Gedcomx\Gedcomx($o["gedcomx"]);
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Atom {

    // identifies the agent used to generate a feed, for debugging and other purposes.
    class Generator  {
    
      // The base.
      var $base;
      // link to a representation that is relevant to the generating agent.
      var $uri;
      // The language.
      var $lang;
      // the version of the generating agent
      var $version;
    
      // human-readable name for the generating agent
      var $value;

      // constructs a Generator from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Generator
      public function toArray() {
        $a = array();
        if( $this->base ) {
          $a["base"] = $this->base;
        }
        if( $this->uri ) {
          $a["uri"] = $this->uri;
        }
        if( $this->lang ) {
          $a["lang"] = $this->lang;
        }
        if( $this->version ) {
          $a["version"] = $this->version;
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        return $a;
      }
      
      // the json (string form) for this Generator
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this Generator with a json hash
      public function initFromArray($o) {
        if( isset($o['base']) ) {
          $this->base = $o["base"];
        }
        if( isset($o['uri']) ) {
          $this->uri = $o["uri"];
        }
        if( isset($o['lang']) ) {
          $this->lang = $o["lang"];
        }
        if( isset($o['version']) ) {
          $this->version = $o["version"];
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform {

    // 
    class HealthConfig  {
    
    
      // (no documentation provided)
      var $buildDate;
      // (no documentation provided)
      var $buildVersion;
      // (no documentation provided)
      var $databaseVersion;
      // (no documentation provided)
      var $platformVersion;

      // constructs a HealthConfig from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this HealthConfig
      public function toArray() {
        $a = array();
        if( $this->buildDate ) {
          $a["buildDate"] = $this->buildDate;
        }
        if( $this->buildVersion ) {
          $a["buildVersion"] = $this->buildVersion;
        }
        if( $this->databaseVersion ) {
          $a["databaseVersion"] = $this->databaseVersion;
        }
        if( $this->platformVersion ) {
          $a["platformVersion"] = $this->platformVersion;
        }
        return $a;
      }
      
      // the json (string form) for this HealthConfig
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this HealthConfig with a json hash
      public function initFromArray($o) {
        if( isset($o['buildDate']) ) {
          $this->buildDate = $o["buildDate"];
        }
        if( isset($o['buildVersion']) ) {
          $this->buildVersion = $o["buildVersion"];
        }
        if( isset($o['databaseVersion']) ) {
          $this->databaseVersion = $o["databaseVersion"];
        }
        if( isset($o['platformVersion']) ) {
          $this->platformVersion = $o["platformVersion"];
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Ct {

    // 
    class ChangeInfo  {
    
      // The operation of the change.
      var $operation;
      // The data type to which the operation applies.
      var $dataType;
      // (no documentation provided)
      var $reason;
      // (no documentation provided)
      var $parent;
    

      // constructs a ChangeInfo from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this ChangeInfo
      public function toArray() {
        $a = array();
        if( $this->operation ) {
          $a["operation"] = $this->operation;
        }
        if( $this->dataType ) {
          $a["dataType"] = $this->dataType;
        }
        if( $this->reason ) {
          $a["reason"] = $this->reason;
        }
        if( $this->parent ) {
          $a["parent"] = $this->parent;
        }
        return $a;
      }
      
      // the json (string form) for this ChangeInfo
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this ChangeInfo with a json hash
      public function initFromArray($o) {
        if( isset($o['operation']) ) {
          $this->operation = $o["operation"];
        }
        if( isset($o['dataType']) ) {
          $this->dataType = $o["dataType"];
        }
        if( isset($o['reason']) ) {
          $this->reason = $o["reason"];
        }
        if( isset($o['parent']) ) {
          $this->parent = $o["parent"];
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Ct {

    // 
    class MergeConflict  {
    
    
      // (no documentation provided)
      var $survivorResource;
      // (no documentation provided)
      var $duplicateResource;

      // constructs a MergeConflict from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this MergeConflict
      public function toArray() {
        $a = array();
        if( $this->survivorResource ) {
          $a["survivorResource"] = $this->survivorResource->toArray();
        }
        if( $this->duplicateResource ) {
          $a["duplicateResource"] = $this->duplicateResource->toArray();
        }
        return $a;
      }
      
      // the json (string form) for this MergeConflict
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this MergeConflict with a json hash
      public function initFromArray($o) {
        if( isset($o['survivorResource']) ) {
          $this->survivorResource = new \Org\Gedcomx\Common\ResourceReference($o["survivorResource"]);
        }
        if( isset($o['duplicateResource']) ) {
          $this->duplicateResource = new \Org\Gedcomx\Common\ResourceReference($o["duplicateResource"]);
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Ct {

    // 
    class MergeAnalysis  {
    
    
      // (no documentation provided)
      var $survivorResources;
      // (no documentation provided)
      var $duplicateResources;
      // (no documentation provided)
      var $conflictingResources;
      // (no documentation provided)
      var $survivor;
      // (no documentation provided)
      var $duplicate;

      // constructs a MergeAnalysis from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this MergeAnalysis
      public function toArray() {
        $a = array();
        if( $this->survivorResources ) {
          $ab = array();
          foreach( $this->survivorResources as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['survivorResources'] = $ab;
        }
        if( $this->duplicateResources ) {
          $ab = array();
          foreach( $this->duplicateResources as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['duplicateResources'] = $ab;
        }
        if( $this->conflictingResources ) {
          $ab = array();
          foreach( $this->conflictingResources as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['conflictingResources'] = $ab;
        }
        if( $this->survivor ) {
          $a["survivor"] = $this->survivor->toArray();
        }
        if( $this->duplicate ) {
          $a["duplicate"] = $this->duplicate->toArray();
        }
        return $a;
      }
      
      // the json (string form) for this MergeAnalysis
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this MergeAnalysis with a json hash
      public function initFromArray($o) {
        $this->survivorResources = array();
        if( isset($o['survivorResources']) ) {
          foreach( $o['survivorResources'] as $i => $x ) {
            $this->survivorResources[$i] = new \Org\Gedcomx\Common\ResourceReference($x);
          }
        }
        $this->duplicateResources = array();
        if( isset($o['duplicateResources']) ) {
          foreach( $o['duplicateResources'] as $i => $x ) {
            $this->duplicateResources[$i] = new \Org\Gedcomx\Common\ResourceReference($x);
          }
        }
        $this->conflictingResources = array();
        if( isset($o['conflictingResources']) ) {
          foreach( $o['conflictingResources'] as $i => $x ) {
            $this->conflictingResources[$i] = new \Org\Familysearch\Platform\Ct\MergeConflict($x);
          }
        }
        if( isset($o['survivor']) ) {
          $this->survivor = new \Org\Gedcomx\Common\ResourceReference($o["survivor"]);
        }
        if( isset($o['duplicate']) ) {
          $this->duplicate = new \Org\Gedcomx\Common\ResourceReference($o["duplicate"]);
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Ct {

    // 
    class Merge  {
    
    
      // List of resources to remove from the survivor person.
      var $resourcesToDelete;
      // List of resources to copy from the duplicate person to survivor person.
      var $resourcesToCopy;

      // constructs a Merge from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Merge
      public function toArray() {
        $a = array();
        if( $this->resourcesToDelete ) {
          $ab = array();
          foreach( $this->resourcesToDelete as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['resourcesToDelete'] = $ab;
        }
        if( $this->resourcesToCopy ) {
          $ab = array();
          foreach( $this->resourcesToCopy as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['resourcesToCopy'] = $ab;
        }
        return $a;
      }
      
      // the json (string form) for this Merge
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this Merge with a json hash
      public function initFromArray($o) {
        $this->resourcesToDelete = array();
        if( isset($o['resourcesToDelete']) ) {
          foreach( $o['resourcesToDelete'] as $i => $x ) {
            $this->resourcesToDelete[$i] = new \Org\Gedcomx\Common\ResourceReference($x);
          }
        }
        $this->resourcesToCopy = array();
        if( isset($o['resourcesToCopy']) ) {
          foreach( $o['resourcesToCopy'] as $i => $x ) {
            $this->resourcesToCopy[$i] = new \Org\Gedcomx\Common\ResourceReference($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform {

    // A tag in the FamilySearch system.
    class Tag  {
    
      // A reference to the value of the tag.
      var $resource;
    

      // constructs a Tag from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Tag
      public function toArray() {
        $a = array();
        if( $this->resource ) {
          $a["resource"] = $this->resource;
        }
        return $a;
      }
      
      // the json (string form) for this Tag
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this Tag with a json hash
      public function initFromArray($o) {
        if( isset($o['resource']) ) {
          $this->resource = $o["resource"];
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform {

    // A common representation of an error on the FamilySearch platform.
    class Error  {
    
    
      // The error code. Intepreted per &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;RFC 2616, Section 10 (HTTP Status Code Definitions)&lt;/a&gt;.
      var $code;
      // A text label associated with the error code.
      var $label;
      // A message associated with the error.
      var $message;
      // The back-end stack trace associated with the error, useful for debugging.
      var $stacktrace;

      // constructs a Error from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Error
      public function toArray() {
        $a = array();
        if( $this->code ) {
          $a["code"] = $this->code;
        }
        if( $this->label ) {
          $a["label"] = $this->label;
        }
        if( $this->message ) {
          $a["message"] = $this->message;
        }
        if( $this->stacktrace ) {
          $a["stacktrace"] = $this->stacktrace;
        }
        return $a;
      }
      
      // the json (string form) for this Error
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this Error with a json hash
      public function initFromArray($o) {
        if( isset($o['code']) ) {
          $this->code = $o["code"];
        }
        if( isset($o['label']) ) {
          $this->label = $o["label"];
        }
        if( isset($o['message']) ) {
          $this->message = $o["message"];
        }
        if( isset($o['stacktrace']) ) {
          $this->stacktrace = $o["stacktrace"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Atom {

    // 
    class CommonAttributes  {
    
      // The base.
      var $base;
      // The language.
      var $lang;
    

      // constructs a CommonAttributes from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this CommonAttributes
      public function toArray() {
        $a = array();
        if( $this->base ) {
          $a["base"] = $this->base;
        }
        if( $this->lang ) {
          $a["lang"] = $this->lang;
        }
        return $a;
      }
      
      // the json (string form) for this CommonAttributes
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this CommonAttributes with a json hash
      public function initFromArray($o) {
        if( isset($o['base']) ) {
          $this->base = $o["base"];
        }
        if( isset($o['lang']) ) {
          $this->lang = $o["lang"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Source {

    // Represents a citation field -- its name and value.
    class CitationField  {
    
      // The citation field's name.
      var $name;
    
      // The citation field's value.
      var $value;

      // constructs a CitationField from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this CitationField
      public function toArray() {
        $a = array();
        if( $this->name ) {
          $a["name"] = $this->name;
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        return $a;
      }
      
      // the json (string form) for this CitationField
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this CitationField with a json hash
      public function initFromArray($o) {
        if( isset($o['name']) ) {
          $this->name = $o["name"];
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Agent {

    // An address.
    class Address  {
    
    
      // The city.
      var $city;
      // The country.
      var $country;
      // The postal code.
      var $postalCode;
      // The state or province.
      var $stateOrProvince;
      // The street.
      var $street;
      // Additional street information.
      var $street2;
      // Additional street information.
      var $street3;
      // The value of the property.
      var $value;

      // constructs a Address from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Address
      public function toArray() {
        $a = array();
        if( $this->city ) {
          $a["city"] = $this->city;
        }
        if( $this->country ) {
          $a["country"] = $this->country;
        }
        if( $this->postalCode ) {
          $a["postalCode"] = $this->postalCode;
        }
        if( $this->stateOrProvince ) {
          $a["stateOrProvince"] = $this->stateOrProvince;
        }
        if( $this->street ) {
          $a["street"] = $this->street;
        }
        if( $this->street2 ) {
          $a["street2"] = $this->street2;
        }
        if( $this->street3 ) {
          $a["street3"] = $this->street3;
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        return $a;
      }
      
      // the json (string form) for this Address
      public function toJson() {
        return json_encode($this->toArray());
      }

      // initializes this Address with a json hash
      public function initFromArray($o) {
        if( isset($o['city']) ) {
          $this->city = $o["city"];
        }
        if( isset($o['country']) ) {
          $this->country = $o["country"];
        }
        if( isset($o['postalCode']) ) {
          $this->postalCode = $o["postalCode"];
        }
        if( isset($o['stateOrProvince']) ) {
          $this->stateOrProvince = $o["stateOrProvince"];
        }
        if( isset($o['street']) ) {
          $this->street = $o["street"];
        }
        if( isset($o['street2']) ) {
          $this->street2 = $o["street2"];
        }
        if( isset($o['street3']) ) {
          $this->street3 = $o["street3"];
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A form of a name.
    class NameForm extends \Org\Gedcomx\Common\ExtensibleData  {
    
      // The language of the conclusion.
      var $lang;
    
      // The full text of the name form.
      var $fullText;
      // The different parts of the name form.
      var $parts;

      // constructs a NameForm from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this NameForm
      public function toArray() {
        $a = parent::toArray();
        if( $this->lang ) {
          $a["lang"] = $this->lang;
        }
        if( $this->fullText ) {
          $a["fullText"] = $this->fullText;
        }
        if( $this->parts ) {
          $ab = array();
          foreach( $this->parts as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['parts'] = $ab;
        }
        return $a;
      }
      

      // initializes this NameForm with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['lang']) ) {
          $this->lang = $o["lang"];
        }
        if( isset($o['fullText']) ) {
          $this->fullText = $o["fullText"];
        }
        $this->parts = array();
        if( isset($o['parts']) ) {
          foreach( $o['parts'] as $i => $x ) {
            $this->parts[$i] = new \Org\Gedcomx\Conclusion\NamePart($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A set of display properties for the convenience of quick display, such as for
    // a Web-based application. All display properties are provided in the default locale for the current
    // application context and are NOT considered canonical for the purposes of data exchange.
    class DisplayProperties extends \Org\Gedcomx\Common\ExtensibleData  {
    
    
      // The context-specific ascendancy number for the person in relation to the other persons in the request. The ancestry number is defined using the Ahnentafel numbering system.
      var $ascendancyNumber;
      // The displayable label for the birth date of the person.
      var $birthDate;
      // The displayable label for the birth place of the person.
      var $birthPlace;
      // The displayable label for the death date of the person.
      var $deathDate;
      // The displayable label for the death place of the person.
      var $deathPlace;
      // The context-specific descendancy number for the person in relation to the other persons in the request. The descendancy number is defined using the d'Aboville numbering system.
      var $descendancyNumber;
      // The displayable label for the gender of the person.
      var $gender;
      // The displayable label for the lifespan of the person.
      var $lifespan;
      // The displayable name of the person.
      var $name;

      // constructs a DisplayProperties from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this DisplayProperties
      public function toArray() {
        $a = parent::toArray();
        if( $this->ascendancyNumber ) {
          $a["ascendancyNumber"] = $this->ascendancyNumber;
        }
        if( $this->birthDate ) {
          $a["birthDate"] = $this->birthDate;
        }
        if( $this->birthPlace ) {
          $a["birthPlace"] = $this->birthPlace;
        }
        if( $this->deathDate ) {
          $a["deathDate"] = $this->deathDate;
        }
        if( $this->deathPlace ) {
          $a["deathPlace"] = $this->deathPlace;
        }
        if( $this->descendancyNumber ) {
          $a["descendancyNumber"] = $this->descendancyNumber;
        }
        if( $this->gender ) {
          $a["gender"] = $this->gender;
        }
        if( $this->lifespan ) {
          $a["lifespan"] = $this->lifespan;
        }
        if( $this->name ) {
          $a["name"] = $this->name;
        }
        return $a;
      }
      

      // initializes this DisplayProperties with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['ascendancyNumber']) ) {
          $this->ascendancyNumber = $o["ascendancyNumber"];
        }
        if( isset($o['birthDate']) ) {
          $this->birthDate = $o["birthDate"];
        }
        if( isset($o['birthPlace']) ) {
          $this->birthPlace = $o["birthPlace"];
        }
        if( isset($o['deathDate']) ) {
          $this->deathDate = $o["deathDate"];
        }
        if( isset($o['deathPlace']) ) {
          $this->deathPlace = $o["deathPlace"];
        }
        if( isset($o['descendancyNumber']) ) {
          $this->descendancyNumber = $o["descendancyNumber"];
        }
        if( isset($o['gender']) ) {
          $this->gender = $o["gender"];
        }
        if( isset($o['lifespan']) ) {
          $this->lifespan = $o["lifespan"];
        }
        if( isset($o['name']) ) {
          $this->name = $o["name"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Links {

    // An data type that supports hypermedia controls (i.e. links).
    class HypermediaEnabledData extends \Org\Gedcomx\Common\ExtensibleData  {
    
    
      // The list of hypermedia links. Links are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
      var $links;

      // constructs a HypermediaEnabledData from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this HypermediaEnabledData
      public function toArray() {
        $a = parent::toArray();
        if( $this->links ) {
          $ab = array();
          foreach( $this->links as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['links'] = $ab;
        }
        return $a;
      }
      

      // initializes this HypermediaEnabledData with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        $this->links = array();
        if( isset($o['links']) ) {
          foreach( $o['links'] as $i => $x ) {
            $this->links[$i] = new \Org\Gedcomx\Links\Link($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A reference to genealogical place.
    class PlaceReference extends \Org\Gedcomx\Common\ExtensibleData  {
    
      // A reference to a description of the place being referenced.
      var $descriptionRef;
    
      // The original value as supplied by the user.
      var $original;

      // constructs a PlaceReference from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this PlaceReference
      public function toArray() {
        $a = parent::toArray();
        if( $this->descriptionRef ) {
          $a["description"] = $this->descriptionRef;
        }
        if( $this->original ) {
          $a["original"] = $this->original;
        }
        return $a;
      }
      

      // initializes this PlaceReference with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['description']) ) {
          $this->descriptionRef = $o["description"];
        }
        if( isset($o['original']) ) {
          $this->original = $o["original"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A concluded genealogical date.
    class DateInfo extends \Org\Gedcomx\Common\ExtensibleData  {
    
    
      // The original text as supplied by the user.
      var $original;
      // The formal value.
      var $formal;
      // The list of normalized values for the date, provided for display purposes by the application. Normalized values
      // are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
      var $normalizedExtensions;

      // constructs a DateInfo from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this DateInfo
      public function toArray() {
        $a = parent::toArray();
        if( $this->original ) {
          $a["original"] = $this->original;
        }
        if( $this->formal ) {
          $a["formal"] = $this->formal;
        }
        if( $this->normalizedExtensions ) {
          $ab = array();
          foreach( $this->normalizedExtensions as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['normalized'] = $ab;
        }
        return $a;
      }
      

      // initializes this DateInfo with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['original']) ) {
          $this->original = $o["original"];
        }
        if( isset($o['formal']) ) {
          $this->formal = $o["formal"];
        }
        $this->normalizedExtensions = array();
        if( isset($o['normalized']) ) {
          foreach( $o['normalized'] as $i => $x ) {
            $this->normalizedExtensions[$i] = new \Org\Gedcomx\Common\TextValue($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A part of a name.
    class NamePart extends \Org\Gedcomx\Common\ExtensibleData  {
    
      // The value of the name part.
      var $value;
      // The type of the name part.
      var $type;
    
      // The qualifiers associated with this name part.
      var $qualifiers;

      // constructs a NamePart from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this NamePart
      public function toArray() {
        $a = parent::toArray();
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->qualifiers ) {
          $ab = array();
          foreach( $this->qualifiers as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['qualifiers'] = $ab;
        }
        return $a;
      }
      

      // initializes this NamePart with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        $this->qualifiers = array();
        if( isset($o['qualifiers']) ) {
          foreach( $o['qualifiers'] as $i => $x ) {
            $this->qualifiers[$i] = new \Org\Gedcomx\Common\ResourceReference($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Atom {

    // 
    class ExtensibleElement extends \Org\Gedcomx\Atom\CommonAttributes  {
    
    

      // constructs a ExtensibleElement from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this ExtensibleElement
      public function toArray() {
        $a = parent::toArray();
        return $a;
      }
      

      // initializes this ExtensibleElement with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
      }
    
    }
    
  }


  namespace Org\Gedcomx\Atom {

    // conveys information about a category associated with an entry or feed.
    class Category extends \Org\Gedcomx\Atom\CommonAttributes  {
    
      // identifies a categorization scheme
      var $scheme;
      // identifies the category to which the entry or feed belongs
      var $term;
      // a human-readable label for display in end-user applications
      var $label;
    

      // constructs a Category from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Category
      public function toArray() {
        $a = parent::toArray();
        if( $this->scheme ) {
          $a["scheme"] = $this->scheme;
        }
        if( $this->term ) {
          $a["term"] = $this->term;
        }
        if( $this->label ) {
          $a["label"] = $this->label;
        }
        return $a;
      }
      

      // initializes this Category with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['scheme']) ) {
          $this->scheme = $o["scheme"];
        }
        if( isset($o['term']) ) {
          $this->term = $o["term"];
        }
        if( isset($o['label']) ) {
          $this->label = $o["label"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Search {

    // The levels of confidence of a search result.
    class ResultConfidence {
    

      //  Result confidence level 1 (lowest).
      const One = "1";

      //  Result confidence level 2.
      const Two = "2";

      //  Result confidence level 3.
      const Three = "3";

      //  Result confidence level 4.
      const Four = "4";

      //  Result confidence level 5 (highest).
      const Five = "5";
    
    }

  }  
    

  namespace Org\Gedcomx\Common {

    // Attribution for genealogical information. Attribution is used to model <strong>who</strong> is contributing/modifying
    // information, <strong>when</strong> they contributed it, and <strong>why</strong> they are making the
    // contribution/modification.
    class Attribution extends \Org\Gedcomx\Common\ExtensibleData  {
    
    
      // Reference to the contributor of the attributed data.
      var $contributor;
      // The modified timestamp for the attributed data.
      var $modified;
      // The &quot;change message&quot; for the attributed data provided by the contributor.
      var $changeMessage;

      // constructs a Attribution from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Attribution
      public function toArray() {
        $a = parent::toArray();
        if( $this->contributor ) {
          $a["contributor"] = $this->contributor->toArray();
        }
        if( $this->modified ) {
          $a["modified"] = $this->modified;
        }
        if( $this->changeMessage ) {
          $a["changeMessage"] = $this->changeMessage;
        }
        return $a;
      }
      

      // initializes this Attribution with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['contributor']) ) {
          $this->contributor = new \Org\Gedcomx\Common\ResourceReference($o["contributor"]);
        }
        if( isset($o['modified']) ) {
          $this->modified = $o["modified"];
        }
        if( isset($o['changeMessage']) ) {
          $this->changeMessage = $o["changeMessage"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A genealogical conclusion.
    class Conclusion extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // A local, context-specific id for the data.
      var $id;
      // The level of confidence the contributor has about the data.
      var $confidence;
      // The language of the conclusion.
      var $lang;
    
      // Attribution metadata for a conclusion.
      var $attribution;
      // The source references for a conclusion.
      var $sources;
      // Notes about a person.
      var $notes;

      // constructs a Conclusion from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Conclusion
      public function toArray() {
        $a = parent::toArray();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->confidence ) {
          $a["confidence"] = $this->confidence;
        }
        if( $this->lang ) {
          $a["lang"] = $this->lang;
        }
        if( $this->attribution ) {
          $a["attribution"] = $this->attribution->toArray();
        }
        if( $this->sources ) {
          $ab = array();
          foreach( $this->sources as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['sources'] = $ab;
        }
        if( $this->notes ) {
          $ab = array();
          foreach( $this->notes as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['notes'] = $ab;
        }
        return $a;
      }
      

      // initializes this Conclusion with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['confidence']) ) {
          $this->confidence = $o["confidence"];
        }
        if( isset($o['lang']) ) {
          $this->lang = $o["lang"];
        }
        if( isset($o['attribution']) ) {
          $this->attribution = new \Org\Gedcomx\Common\Attribution($o["attribution"]);
        }
        $this->sources = array();
        if( isset($o['sources']) ) {
          foreach( $o['sources'] as $i => $x ) {
            $this->sources[$i] = new \Org\Gedcomx\Source\SourceReference($x);
          }
        }
        $this->notes = array();
        if( isset($o['notes']) ) {
          foreach( $o['notes'] as $i => $x ) {
            $this->notes[$i] = new \Org\Gedcomx\Common\Note($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Atom {

    // The "atom:entry" element represents an individual entry, acting as a container for metadata and data associated with the entry.
    class Entry extends \Org\Gedcomx\Atom\ExtensibleElement  {
    
    
      // The author of the entry.
      var $authors;
      // information about a category associated with an entry.
      var $categories;
      // The confidence of the result, if this entry represents a search result.
      var $confidence;
      // The content of the entry.
      var $content;
      // information about a category associated with the entry
      var $contributors;
      // a permanent, universally unique identifier for the entry.
      var $id;
      // a reference from a entry to a Web resource.
      var $links;
      // instant in time associated with an event early in the life cycle of the entry.
      var $published;
      // information about rights held in and over the entry.
      var $rights;
      // The relevance score.
      var $score;
      // a human-readable title for the entry
      var $title;
      // the most recent instant in time when the entry was modified in a way the publisher considers significant.
      var $updated;

      // constructs a Entry from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Entry
      public function toArray() {
        $a = parent::toArray();
        if( $this->authors ) {
          $ab = array();
          foreach( $this->authors as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['authors'] = $ab;
        }
        if( $this->categories ) {
          $ab = array();
          foreach( $this->categories as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['categories'] = $ab;
        }
        if( $this->confidence ) {
          $a["confidence"] = $this->confidence;
        }
        if( $this->content ) {
          $a["content"] = $this->content->toArray();
        }
        if( $this->contributors ) {
          $ab = array();
          foreach( $this->contributors as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['contributors'] = $ab;
        }
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->links ) {
          $ab = array();
          foreach( $this->links as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['links'] = $ab;
        }
        if( $this->published ) {
          $a["published"] = $this->published;
        }
        if( $this->rights ) {
          $a["rights"] = $this->rights;
        }
        if( $this->score ) {
          $a["score"] = $this->score;
        }
        if( $this->title ) {
          $a["title"] = $this->title;
        }
        if( $this->updated ) {
          $a["updated"] = $this->updated;
        }
        return $a;
      }
      

      // initializes this Entry with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        $this->authors = array();
        if( isset($o['authors']) ) {
          foreach( $o['authors'] as $i => $x ) {
            $this->authors[$i] = new \Org\Gedcomx\Atom\Person($x);
          }
        }
        $this->categories = array();
        if( isset($o['categories']) ) {
          foreach( $o['categories'] as $i => $x ) {
            $this->categories[$i] = new \Org\Gedcomx\Atom\Category($x);
          }
        }
        if( isset($o['confidence']) ) {
          $this->confidence = $o["confidence"];
        }
        if( isset($o['content']) ) {
          $this->content = new \Org\Gedcomx\Atom\Content($o["content"]);
        }
        $this->contributors = array();
        if( isset($o['contributors']) ) {
          foreach( $o['contributors'] as $i => $x ) {
            $this->contributors[$i] = new \Org\Gedcomx\Atom\Person($x);
          }
        }
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        $this->links = array();
        if( isset($o['links']) ) {
          foreach( $o['links'] as $i => $x ) {
            $this->links[$i] = new \Org\Gedcomx\Links\Link($x);
          }
        }
        if( isset($o['published']) ) {
          $this->published = $o["published"];
        }
        if( isset($o['rights']) ) {
          $this->rights = $o["rights"];
        }
        if( isset($o['score']) ) {
          $this->score = $o["score"];
        }
        if( isset($o['title']) ) {
          $this->title = $o["title"];
        }
        if( isset($o['updated']) ) {
          $this->updated = $o["updated"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Source {

    // Represents a description of a source.
    class SourceDescription extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // A local, context-specific id for the data.
      var $id;
      // The URI (if applicable) of the actual source.
      var $about;
    
      // The bibliographic citations for this source.
      var $citations;
      // A reference to the entity that mediates access to the described source.
      var $mediator;
      // References to any sources to which this source is related (usually applicable to sources that are derived from or contained in another source).
      var $sources;
      // References to any conclusions extracted from the source description, analyzed and evaluated atomically within on context of the source..
      var $extractedConclusions;
      // A reference to the source that contains this source.
      var $componentOf;
      // A list of titles for this source.
      var $titles;
      // Notes about a source.
      var $notes;
      // The attribution metadata for this source description.
      var $attribution;

      // constructs a SourceDescription from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this SourceDescription
      public function toArray() {
        $a = parent::toArray();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->about ) {
          $a["about"] = $this->about;
        }
        if( $this->citations ) {
          $ab = array();
          foreach( $this->citations as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['citations'] = $ab;
        }
        if( $this->mediator ) {
          $a["mediator"] = $this->mediator->toArray();
        }
        if( $this->sources ) {
          $ab = array();
          foreach( $this->sources as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['sources'] = $ab;
        }
        if( $this->extractedConclusions ) {
          $ab = array();
          foreach( $this->extractedConclusions as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['extractedConclusions'] = $ab;
        }
        if( $this->componentOf ) {
          $a["componentOf"] = $this->componentOf->toArray();
        }
        if( $this->titles ) {
          $ab = array();
          foreach( $this->titles as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['titles'] = $ab;
        }
        if( $this->notes ) {
          $ab = array();
          foreach( $this->notes as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['notes'] = $ab;
        }
        if( $this->attribution ) {
          $a["attribution"] = $this->attribution->toArray();
        }
        return $a;
      }
      

      // initializes this SourceDescription with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['about']) ) {
          $this->about = $o["about"];
        }
        $this->citations = array();
        if( isset($o['citations']) ) {
          foreach( $o['citations'] as $i => $x ) {
            $this->citations[$i] = new \Org\Gedcomx\Source\SourceCitation($x);
          }
        }
        if( isset($o['mediator']) ) {
          $this->mediator = new \Org\Gedcomx\Common\ResourceReference($o["mediator"]);
        }
        $this->sources = array();
        if( isset($o['sources']) ) {
          foreach( $o['sources'] as $i => $x ) {
            $this->sources[$i] = new \Org\Gedcomx\Source\SourceReference($x);
          }
        }
        $this->extractedConclusions = array();
        if( isset($o['extractedConclusions']) ) {
          foreach( $o['extractedConclusions'] as $i => $x ) {
            $this->extractedConclusions[$i] = new \Org\Gedcomx\Common\ResourceReference($x);
          }
        }
        if( isset($o['componentOf']) ) {
          $this->componentOf = new \Org\Gedcomx\Source\SourceReference($o["componentOf"]);
        }
        $this->titles = array();
        if( isset($o['titles']) ) {
          foreach( $o['titles'] as $i => $x ) {
            $this->titles[$i] = new \Org\Gedcomx\Common\TextValue($x);
          }
        }
        $this->notes = array();
        if( isset($o['notes']) ) {
          foreach( $o['notes'] as $i => $x ) {
            $this->notes[$i] = new \Org\Gedcomx\Common\Note($x);
          }
        }
        if( isset($o['attribution']) ) {
          $this->attribution = new \Org\Gedcomx\Common\Attribution($o["attribution"]);
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Source {

    // An attributable reference to a description of a source.
    class SourceReference extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // A reference to a description of the source being referenced.
      var $descriptionRef;
    
      // The attribution metadata for this source reference.
      var $attribution;

      // constructs a SourceReference from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this SourceReference
      public function toArray() {
        $a = parent::toArray();
        if( $this->descriptionRef ) {
          $a["description"] = $this->descriptionRef;
        }
        if( $this->attribution ) {
          $a["attribution"] = $this->attribution->toArray();
        }
        return $a;
      }
      

      // initializes this SourceReference with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['description']) ) {
          $this->descriptionRef = $o["description"];
        }
        if( isset($o['attribution']) ) {
          $this->attribution = new \Org\Gedcomx\Common\Attribution($o["attribution"]);
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Common {

    // A note about a genealogical resource (e.g. conclusion or source).
    class Note extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // A local, context-specific id for the data.
      var $id;
      // The language of the note.
      var $lang;
    
      // The subject of the note.
      var $subject;
      // The text of the note.
      var $text;
      // Attribution metadata for a note.
      var $attribution;

      // constructs a Note from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Note
      public function toArray() {
        $a = parent::toArray();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->lang ) {
          $a["lang"] = $this->lang;
        }
        if( $this->subject ) {
          $a["subject"] = $this->subject;
        }
        if( $this->text ) {
          $a["text"] = $this->text;
        }
        if( $this->attribution ) {
          $a["attribution"] = $this->attribution->toArray();
        }
        return $a;
      }
      

      // initializes this Note with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['lang']) ) {
          $this->lang = $o["lang"];
        }
        if( isset($o['subject']) ) {
          $this->subject = $o["subject"];
        }
        if( isset($o['text']) ) {
          $this->text = $o["text"];
        }
        if( isset($o['attribution']) ) {
          $this->attribution = new \Org\Gedcomx\Common\Attribution($o["attribution"]);
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Agent {

    // An agent, e.g. person, organization, or group. In genealogical research, an agent often
    // takes the role of a contributor.
    class Agent extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // The id of this piece of metadata.
      var $id;
    
      // The accounts that belong to this person or organization.
      var $accounts;
      // The addresses that belong to this person or organization.
      var $addresses;
      // The emails that belong to this person or organization.
      var $emails;
      // The homepage.
      var $homepage;
      // The list of identifiers for the agent.
      var $identifiers;
      // The list of names for the agent.
      var $names;
      // The &lt;a href=&quot;http://openid.net/&quot;&gt;openid&lt;/a&gt; of the person or organization.
      var $openid;
      // The phones that belong to this person or organization.
      var $phones;

      // constructs a Agent from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Agent
      public function toArray() {
        $a = parent::toArray();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->accounts ) {
          $ab = array();
          foreach( $this->accounts as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['accounts'] = $ab;
        }
        if( $this->addresses ) {
          $ab = array();
          foreach( $this->addresses as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['addresses'] = $ab;
        }
        if( $this->emails ) {
          $ab = array();
          foreach( $this->emails as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['emails'] = $ab;
        }
        if( $this->homepage ) {
          $a["homepage"] = $this->homepage->toArray();
        }
        if( $this->identifiers ) {
          $ab = array();
          foreach( $this->identifiers as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['identifiers'] = $ab;
        }
        if( $this->names ) {
          $ab = array();
          foreach( $this->names as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['names'] = $ab;
        }
        if( $this->openid ) {
          $a["openid"] = $this->openid->toArray();
        }
        if( $this->phones ) {
          $ab = array();
          foreach( $this->phones as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['phones'] = $ab;
        }
        return $a;
      }
      

      // initializes this Agent with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        $this->accounts = array();
        if( isset($o['accounts']) ) {
          foreach( $o['accounts'] as $i => $x ) {
            $this->accounts[$i] = new \Org\Gedcomx\Agent\OnlineAccount($x);
          }
        }
        $this->addresses = array();
        if( isset($o['addresses']) ) {
          foreach( $o['addresses'] as $i => $x ) {
            $this->addresses[$i] = new \Org\Gedcomx\Agent\Address($x);
          }
        }
        $this->emails = array();
        if( isset($o['emails']) ) {
          foreach( $o['emails'] as $i => $x ) {
            $this->emails[$i] = new \Org\Gedcomx\Common\ResourceReference($x);
          }
        }
        if( isset($o['homepage']) ) {
          $this->homepage = new \Org\Gedcomx\Common\ResourceReference($o["homepage"]);
        }
        $this->identifiers = array();
        if( isset($o['identifiers']) ) {
          foreach( $o['identifiers'] as $i => $x ) {
            $this->identifiers[$i] = new \Org\Gedcomx\Conclusion\Identifier($x);
          }
        }
        $this->names = array();
        if( isset($o['names']) ) {
          foreach( $o['names'] as $i => $x ) {
            $this->names[$i] = new \Org\Gedcomx\Common\TextValue($x);
          }
        }
        if( isset($o['openid']) ) {
          $this->openid = new \Org\Gedcomx\Common\ResourceReference($o["openid"]);
        }
        $this->phones = array();
        if( isset($o['phones']) ) {
          foreach( $o['phones'] as $i => $x ) {
            $this->phones[$i] = new \Org\Gedcomx\Common\ResourceReference($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Atom {

    // <p>The Atom media types provide a format for web content and metadata syndication. The XML media type is defined by
    // <a href="http://tools.ietf.org/html/rfc4287#section-4">RFC 4287</a>. The JSON media type is specific to GEDCOM X and is a
    // translation to JSON from the XML.</p>
    class Feed extends \Org\Gedcomx\Atom\ExtensibleElement  {
    
    
      // The author of the feed.
      var $authors;
      // information about a category associated with the feed
      var $contributors;
      // identifies the agent used to generate the feed
      var $generator;
      // identifies an image that provides iconic visual identification for the feed.
      var $icon;
      // a permanent, universally unique identifier for the feed.
      var $id;
      // The total number of results available, if this feed is supplying a subset of results, such as for a query.
      var $results;
      // The index of the first entry in this page of data, if this feed is supplying a page of data.
      var $index;
      // a reference from a feed to a Web resource.
      var $links;
      // identifies an image that provides visual identification for the feed.
      var $logo;
      // information about rights held in and over the feed.
      var $rights;
      // a human-readable description or subtitle for the feed.
      var $subtitle;
      // a human-readable title for the feed
      var $title;
      // the most recent instant in time when the feed was modified in a way the publisher considers significant.
      var $updated;
      // The entries in the feed.
      var $entries;

      // constructs a Feed from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Feed
      public function toArray() {
        $a = parent::toArray();
        if( $this->authors ) {
          $ab = array();
          foreach( $this->authors as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['authors'] = $ab;
        }
        if( $this->contributors ) {
          $ab = array();
          foreach( $this->contributors as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['contributors'] = $ab;
        }
        if( $this->generator ) {
          $a["generator"] = $this->generator->toArray();
        }
        if( $this->icon ) {
          $a["icon"] = $this->icon;
        }
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->results ) {
          $a["results"] = $this->results;
        }
        if( $this->index ) {
          $a["index"] = $this->index;
        }
        if( $this->links ) {
          $ab = array();
          foreach( $this->links as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['links'] = $ab;
        }
        if( $this->logo ) {
          $a["logo"] = $this->logo;
        }
        if( $this->rights ) {
          $a["rights"] = $this->rights;
        }
        if( $this->subtitle ) {
          $a["subtitle"] = $this->subtitle;
        }
        if( $this->title ) {
          $a["title"] = $this->title;
        }
        if( $this->updated ) {
          $a["updated"] = $this->updated;
        }
        if( $this->entries ) {
          $ab = array();
          foreach( $this->entries as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['entries'] = $ab;
        }
        return $a;
      }
      

      // initializes this Feed with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        $this->authors = array();
        if( isset($o['authors']) ) {
          foreach( $o['authors'] as $i => $x ) {
            $this->authors[$i] = new \Org\Gedcomx\Atom\Person($x);
          }
        }
        $this->contributors = array();
        if( isset($o['contributors']) ) {
          foreach( $o['contributors'] as $i => $x ) {
            $this->contributors[$i] = new \Org\Gedcomx\Atom\Person($x);
          }
        }
        if( isset($o['generator']) ) {
          $this->generator = new \Org\Gedcomx\Atom\Generator($o["generator"]);
        }
        if( isset($o['icon']) ) {
          $this->icon = $o["icon"];
        }
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['results']) ) {
          $this->results = $o["results"];
        }
        if( isset($o['index']) ) {
          $this->index = $o["index"];
        }
        $this->links = array();
        if( isset($o['links']) ) {
          foreach( $o['links'] as $i => $x ) {
            $this->links[$i] = new \Org\Gedcomx\Links\Link($x);
          }
        }
        if( isset($o['logo']) ) {
          $this->logo = $o["logo"];
        }
        if( isset($o['rights']) ) {
          $this->rights = $o["rights"];
        }
        if( isset($o['subtitle']) ) {
          $this->subtitle = $o["subtitle"];
        }
        if( isset($o['title']) ) {
          $this->title = $o["title"];
        }
        if( isset($o['updated']) ) {
          $this->updated = $o["updated"];
        }
        $this->entries = array();
        if( isset($o['entries']) ) {
          foreach( $o['entries'] as $i => $x ) {
            $this->entries[$i] = new \Org\Gedcomx\Atom\Entry($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Atom {

    // A Person construct is an element that describes a person, corporation, or similar entity
    class Person extends \Org\Gedcomx\Atom\ExtensibleElement  {
    
    
      // a human-readable name for the person.
      var $name;
      // an IRI associated with the person.
      var $uri;
      // an e-mail address associated with the person.
      var $email;

      // constructs a Person from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Person
      public function toArray() {
        $a = parent::toArray();
        if( $this->name ) {
          $a["name"] = $this->name;
        }
        if( $this->uri ) {
          $a["uri"] = $this->uri;
        }
        if( $this->email ) {
          $a["email"] = $this->email;
        }
        return $a;
      }
      

      // initializes this Person with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['name']) ) {
          $this->name = $o["name"];
        }
        if( isset($o['uri']) ) {
          $this->uri = $o["uri"];
        }
        if( isset($o['email']) ) {
          $this->email = $o["email"];
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Discussions {

    // 
    class Comment extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // A local, context-specific id for the data.
      var $id;
    
      // The text or &quot;message body&quot; of the comment
      var $text;
      // date of creation
      var $created;
      // contributor of comment
      var $contributor;

      // constructs a Comment from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Comment
      public function toArray() {
        $a = parent::toArray();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->text ) {
          $a["text"] = $this->text;
        }
        if( $this->created ) {
          $a["created"] = $this->created;
        }
        if( $this->contributor ) {
          $a["contributor"] = $this->contributor->toArray();
        }
        return $a;
      }
      

      // initializes this Comment with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['text']) ) {
          $this->text = $o["text"];
        }
        if( isset($o['created']) ) {
          $this->created = $o["created"];
        }
        if( isset($o['contributor']) ) {
          $this->contributor = new \Org\Gedcomx\Common\ResourceReference($o["contributor"]);
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Sources {

    // A representation of a folder in the user's source box.
    class Folder extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // A local, context-specific id for the data.
      var $id;
      // Number of comments
      var $sourceCount;
    
      // the one-line summary text
      var $name;
      // contributor of discussion
      var $contributor;

      // constructs a Folder from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Folder
      public function toArray() {
        $a = parent::toArray();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->sourceCount ) {
          $a["sourceCount"] = $this->sourceCount;
        }
        if( $this->name ) {
          $a["name"] = $this->name;
        }
        if( $this->contributor ) {
          $a["contributor"] = $this->contributor->toArray();
        }
        return $a;
      }
      

      // initializes this Folder with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['sourceCount']) ) {
          $this->sourceCount = $o["sourceCount"];
        }
        if( isset($o['name']) ) {
          $this->name = $o["name"];
        }
        if( isset($o['contributor']) ) {
          $this->contributor = new \Org\Gedcomx\Common\ResourceReference($o["contributor"]);
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Users {

    // Family Tree User Service User
    class User extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
    
      // (no documentation provided)
      var $alternateEmail;
      // (no documentation provided)
      var $birthDate;
      // (no documentation provided)
      var $contactName;
      // (no documentation provided)
      var $country;
      // (no documentation provided)
      var $displayName;
      // (no documentation provided)
      var $email;
      // (no documentation provided)
      var $familyName;
      // (no documentation provided)
      var $fullName;
      // (no documentation provided)
      var $gender;
      // (no documentation provided)
      var $givenName;
      // (no documentation provided)
      var $helperAccessPin;
      // (no documentation provided)
      var $id;
      // (no documentation provided)
      var $ldsMemberAccount;
      // (no documentation provided)
      var $mailingAddress;
      // (no documentation provided)
      var $personId;
      // (no documentation provided)
      var $phoneNumber;
      // (no documentation provided)
      var $preferredLanguage;
      // (no documentation provided)
      var $treeUserId;

      // constructs a User from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this User
      public function toArray() {
        $a = parent::toArray();
        if( $this->alternateEmail ) {
          $a["alternateEmail"] = $this->alternateEmail;
        }
        if( $this->birthDate ) {
          $a["birthDate"] = $this->birthDate;
        }
        if( $this->contactName ) {
          $a["contactName"] = $this->contactName;
        }
        if( $this->country ) {
          $a["country"] = $this->country;
        }
        if( $this->displayName ) {
          $a["displayName"] = $this->displayName;
        }
        if( $this->email ) {
          $a["email"] = $this->email;
        }
        if( $this->familyName ) {
          $a["familyName"] = $this->familyName;
        }
        if( $this->fullName ) {
          $a["fullName"] = $this->fullName;
        }
        if( $this->gender ) {
          $a["gender"] = $this->gender;
        }
        if( $this->givenName ) {
          $a["givenName"] = $this->givenName;
        }
        if( $this->helperAccessPin ) {
          $a["helperAccessPin"] = $this->helperAccessPin;
        }
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->ldsMemberAccount ) {
          $a["ldsMemberAccount"] = $this->ldsMemberAccount;
        }
        if( $this->mailingAddress ) {
          $a["mailingAddress"] = $this->mailingAddress;
        }
        if( $this->personId ) {
          $a["personId"] = $this->personId;
        }
        if( $this->phoneNumber ) {
          $a["phoneNumber"] = $this->phoneNumber;
        }
        if( $this->preferredLanguage ) {
          $a["preferredLanguage"] = $this->preferredLanguage;
        }
        if( $this->treeUserId ) {
          $a["treeUserId"] = $this->treeUserId;
        }
        return $a;
      }
      

      // initializes this User with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['alternateEmail']) ) {
          $this->alternateEmail = $o["alternateEmail"];
        }
        if( isset($o['birthDate']) ) {
          $this->birthDate = $o["birthDate"];
        }
        if( isset($o['contactName']) ) {
          $this->contactName = $o["contactName"];
        }
        if( isset($o['country']) ) {
          $this->country = $o["country"];
        }
        if( isset($o['displayName']) ) {
          $this->displayName = $o["displayName"];
        }
        if( isset($o['email']) ) {
          $this->email = $o["email"];
        }
        if( isset($o['familyName']) ) {
          $this->familyName = $o["familyName"];
        }
        if( isset($o['fullName']) ) {
          $this->fullName = $o["fullName"];
        }
        if( isset($o['gender']) ) {
          $this->gender = $o["gender"];
        }
        if( isset($o['givenName']) ) {
          $this->givenName = $o["givenName"];
        }
        if( isset($o['helperAccessPin']) ) {
          $this->helperAccessPin = $o["helperAccessPin"];
        }
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['ldsMemberAccount']) ) {
          $this->ldsMemberAccount = $o["ldsMemberAccount"];
        }
        if( isset($o['mailingAddress']) ) {
          $this->mailingAddress = $o["mailingAddress"];
        }
        if( isset($o['personId']) ) {
          $this->personId = $o["personId"];
        }
        if( isset($o['phoneNumber']) ) {
          $this->phoneNumber = $o["phoneNumber"];
        }
        if( isset($o['preferredLanguage']) ) {
          $this->preferredLanguage = $o["preferredLanguage"];
        }
        if( isset($o['treeUserId']) ) {
          $this->treeUserId = $o["treeUserId"];
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Discussions {

    // A discussion.
    class Discussion extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // A local, context-specific id for the data.
      var $id;
    
      // the one-line summary text
      var $title;
      // The text or &quot;message body&quot; of the discussion
      var $details;
      // date of creation
      var $created;
      // contributor of discussion
      var $contributor;
      // Date of last modification
      var $modified;
      // Number of comments
      var $numberOfComments;
      // The comments on this discussion.
      var $comments;

      // constructs a Discussion from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Discussion
      public function toArray() {
        $a = parent::toArray();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->title ) {
          $a["title"] = $this->title;
        }
        if( $this->details ) {
          $a["details"] = $this->details;
        }
        if( $this->created ) {
          $a["created"] = $this->created;
        }
        if( $this->contributor ) {
          $a["contributor"] = $this->contributor->toArray();
        }
        if( $this->modified ) {
          $a["modified"] = $this->modified;
        }
        if( $this->numberOfComments ) {
          $a["numberOfComments"] = $this->numberOfComments;
        }
        if( $this->comments ) {
          $ab = array();
          foreach( $this->comments as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['comments'] = $ab;
        }
        return $a;
      }
      

      // initializes this Discussion with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['title']) ) {
          $this->title = $o["title"];
        }
        if( isset($o['details']) ) {
          $this->details = $o["details"];
        }
        if( isset($o['created']) ) {
          $this->created = $o["created"];
        }
        if( isset($o['contributor']) ) {
          $this->contributor = new \Org\Gedcomx\Common\ResourceReference($o["contributor"]);
        }
        if( isset($o['modified']) ) {
          $this->modified = $o["modified"];
        }
        if( isset($o['numberOfComments']) ) {
          $this->numberOfComments = $o["numberOfComments"];
        }
        $this->comments = array();
        if( isset($o['comments']) ) {
          foreach( $o['comments'] as $i => $x ) {
            $this->comments[$i] = new \Org\Familysearch\Platform\Discussions\Comment($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Ct {

    // 
    class DiscussionReference extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // The URI to the resource.
      var $resource;
    

      // constructs a DiscussionReference from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this DiscussionReference
      public function toArray() {
        $a = parent::toArray();
        if( $this->resource ) {
          $a["resource"] = $this->resource;
        }
        return $a;
      }
      

      // initializes this DiscussionReference with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['resource']) ) {
          $this->resource = $o["resource"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx {

    // <p>The GEDCOM X media types define the serialization formats of the GEDCOM X conceptual model. The canonical documentation
    // is provided by the formal specification documents:</p>
    // 
    // <ul>
    // <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/conceptual-model-specification.md">The GEDCOM X Conceptual Model, Version 1.0</a></li>
    // <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/json-format-specification.md">The GEDCOM X JSON Format, Version 1.0</a></li>
    // <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/xml-format-specification.md">The GEDCOM X XML Format, Version 1.0</a></li>
    // </ul>
    // 
    // <p>This documentation is provided as a non-normative reference guide.</p>
    class Gedcomx extends \Org\Gedcomx\Links\HypermediaEnabledData  {
    
      // The id of this genealogical data set.
      var $id;
      // The language of the genealogical data.
      var $lang;
    
      // The attribution of this genealogical data.
      var $attribution;
      // The persons included in this genealogical data set.
      var $persons;
      // The relationships included in this genealogical data set.
      var $relationships;
      // The descriptions of sources included in this genealogical data set.
      var $sourceDescriptions;
      // The agents included in this genealogical data set.
      var $agents;
      // The events included in this genealogical data set.
      var $events;
      // The places included in this genealogical data set.
      var $places;
      // The documents included in this genealogical data set.
      var $documents;

      // constructs a Gedcomx from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Gedcomx
      public function toArray() {
        $a = parent::toArray();
        if( $this->id ) {
          $a["id"] = $this->id;
        }
        if( $this->lang ) {
          $a["lang"] = $this->lang;
        }
        if( $this->attribution ) {
          $a["attribution"] = $this->attribution->toArray();
        }
        if( $this->persons ) {
          $ab = array();
          foreach( $this->persons as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['persons'] = $ab;
        }
        if( $this->relationships ) {
          $ab = array();
          foreach( $this->relationships as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['relationships'] = $ab;
        }
        if( $this->sourceDescriptions ) {
          $ab = array();
          foreach( $this->sourceDescriptions as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['sourceDescriptions'] = $ab;
        }
        if( $this->agents ) {
          $ab = array();
          foreach( $this->agents as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['agents'] = $ab;
        }
        if( $this->events ) {
          $ab = array();
          foreach( $this->events as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['events'] = $ab;
        }
        if( $this->places ) {
          $ab = array();
          foreach( $this->places as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['places'] = $ab;
        }
        if( $this->documents ) {
          $ab = array();
          foreach( $this->documents as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['documents'] = $ab;
        }
        return $a;
      }
      

      // initializes this Gedcomx with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['id']) ) {
          $this->id = $o["id"];
        }
        if( isset($o['lang']) ) {
          $this->lang = $o["lang"];
        }
        if( isset($o['attribution']) ) {
          $this->attribution = new \Org\Gedcomx\Common\Attribution($o["attribution"]);
        }
        $this->persons = array();
        if( isset($o['persons']) ) {
          foreach( $o['persons'] as $i => $x ) {
            $this->persons[$i] = new \Org\Gedcomx\Conclusion\Person($x);
          }
        }
        $this->relationships = array();
        if( isset($o['relationships']) ) {
          foreach( $o['relationships'] as $i => $x ) {
            $this->relationships[$i] = new \Org\Gedcomx\Conclusion\Relationship($x);
          }
        }
        $this->sourceDescriptions = array();
        if( isset($o['sourceDescriptions']) ) {
          foreach( $o['sourceDescriptions'] as $i => $x ) {
            $this->sourceDescriptions[$i] = new \Org\Gedcomx\Source\SourceDescription($x);
          }
        }
        $this->agents = array();
        if( isset($o['agents']) ) {
          foreach( $o['agents'] as $i => $x ) {
            $this->agents[$i] = new \Org\Gedcomx\Agent\Agent($x);
          }
        }
        $this->events = array();
        if( isset($o['events']) ) {
          foreach( $o['events'] as $i => $x ) {
            $this->events[$i] = new \Org\Gedcomx\Conclusion\Event($x);
          }
        }
        $this->places = array();
        if( isset($o['places']) ) {
          foreach( $o['places'] as $i => $x ) {
            $this->places[$i] = new \Org\Gedcomx\Conclusion\PlaceDescription($x);
          }
        }
        $this->documents = array();
        if( isset($o['documents']) ) {
          foreach( $o['documents'] as $i => $x ) {
            $this->documents[$i] = new \Org\Gedcomx\Conclusion\Document($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A person.
    class Person extends \Org\Gedcomx\Conclusion\Conclusion  {
    
    
      // The list of identifiers for the person.
      var $identifiers;
      // Living status of the person as treated by the system.
      var $living;
      // The gender conclusion for the person.
      var $gender;
      // The name conclusions for the person.
      var $names;
      // The fact conclusions for the person.
      var $facts;
      // Display properties for the person. Display properties are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
      var $displayExtension;

      // constructs a Person from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Person
      public function toArray() {
        $a = parent::toArray();
        if( $this->identifiers ) {
          $ab = array();
          foreach( $this->identifiers as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['identifiers'] = $ab;
        }
        if( $this->living ) {
          $a["living"] = $this->living;
        }
        if( $this->gender ) {
          $a["gender"] = $this->gender->toArray();
        }
        if( $this->names ) {
          $ab = array();
          foreach( $this->names as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['names'] = $ab;
        }
        if( $this->facts ) {
          $ab = array();
          foreach( $this->facts as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['facts'] = $ab;
        }
        if( $this->displayExtension ) {
          $a["display"] = $this->displayExtension->toArray();
        }
        return $a;
      }
      

      // initializes this Person with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        $this->identifiers = array();
        if( isset($o['identifiers']) ) {
          foreach( $o['identifiers'] as $i => $x ) {
            $this->identifiers[$i] = new \Org\Gedcomx\Conclusion\Identifier($x);
          }
        }
        if( isset($o['living']) ) {
          $this->living = $o["living"];
        }
        if( isset($o['gender']) ) {
          $this->gender = new \Org\Gedcomx\Conclusion\Gender($o["gender"]);
        }
        $this->names = array();
        if( isset($o['names']) ) {
          foreach( $o['names'] as $i => $x ) {
            $this->names[$i] = new \Org\Gedcomx\Conclusion\Name($x);
          }
        }
        $this->facts = array();
        if( isset($o['facts']) ) {
          foreach( $o['facts'] as $i => $x ) {
            $this->facts[$i] = new \Org\Gedcomx\Conclusion\Fact($x);
          }
        }
        if( isset($o['display']) ) {
          $this->displayExtension = new \Org\Gedcomx\Conclusion\DisplayProperties($o["display"]);
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A relationship between two or more persons.
    class Relationship extends \Org\Gedcomx\Conclusion\Conclusion  {
    
      // The type of this relationship.
      var $type;
    
      // A reference to a person in the relationship. The name &quot;person1&quot; is used only to distinguish it from
      // the other person in this relationship and implies neither order nor role. When the relationship type
      // implies direction, it goes from &quot;person1&quot; to &quot;person2&quot;.
      var $person1;
      // A reference to a person in the relationship. The name &quot;person2&quot; is used only to distinguish it from
      // the other person in this relationship and implies neither order nor role. When the relationship type
      // implies direction, it goes from &quot;person1&quot; to &quot;person2&quot;.
      var $person2;
      // The fact conclusions for the relationship.
      var $facts;
      // The list of identifiers for the relationship.
      var $identifiers;

      // constructs a Relationship from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Relationship
      public function toArray() {
        $a = parent::toArray();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->person1 ) {
          $a["person1"] = $this->person1->toArray();
        }
        if( $this->person2 ) {
          $a["person2"] = $this->person2->toArray();
        }
        if( $this->facts ) {
          $ab = array();
          foreach( $this->facts as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['facts'] = $ab;
        }
        if( $this->identifiers ) {
          $ab = array();
          foreach( $this->identifiers as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['identifiers'] = $ab;
        }
        return $a;
      }
      

      // initializes this Relationship with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['person1']) ) {
          $this->person1 = new \Org\Gedcomx\Common\ResourceReference($o["person1"]);
        }
        if( isset($o['person2']) ) {
          $this->person2 = new \Org\Gedcomx\Common\ResourceReference($o["person2"]);
        }
        $this->facts = array();
        if( isset($o['facts']) ) {
          foreach( $o['facts'] as $i => $x ) {
            $this->facts[$i] = new \Org\Gedcomx\Conclusion\Fact($x);
          }
        }
        $this->identifiers = array();
        if( isset($o['identifiers']) ) {
          foreach( $o['identifiers'] as $i => $x ) {
            $this->identifiers[$i] = new \Org\Gedcomx\Conclusion\Identifier($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A PlaceDescription is used to describe the details of a place in terms of its name
    // and possibly its type, time period, and/or a geospatial description -- a description
    // of a place as a snapshot in time.
    class PlaceDescription extends \Org\Gedcomx\Conclusion\Conclusion  {
    
      // A uniform resource identifier (URI) for the place being described.
      var $about;
      // An implementation-specific uniform resource identifier (URI) used to identify the type of a place (e.g., address, city, county, province, state, country, etc.).
      var $type;
    
      // An ordered list of standardized (or normalized), fully-qualified (in terms of what is known of the applicable jurisdictional hierarchy) names for this place that are applicable to this description of this place.
      var $names;
      // A description of the time period to which this place description is relevant.
      var $temporalDescription;
      // Degrees north or south of the Equator.
      var $latitude;
      // Angular distance in degrees, relative to the Prime Meridian.
      var $longitude;
      // A reference to a geospatial description of this place.
      var $spatialDescription;
      // A list of known identifiers for this place description.
      var $identifiers;

      // constructs a PlaceDescription from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this PlaceDescription
      public function toArray() {
        $a = parent::toArray();
        if( $this->about ) {
          $a["about"] = $this->about;
        }
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->names ) {
          $ab = array();
          foreach( $this->names as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['names'] = $ab;
        }
        if( $this->temporalDescription ) {
          $a["temporalDescription"] = $this->temporalDescription->toArray();
        }
        if( $this->latitude ) {
          $a["latitude"] = $this->latitude;
        }
        if( $this->longitude ) {
          $a["longitude"] = $this->longitude;
        }
        if( $this->spatialDescription ) {
          $a["spatialDescription"] = $this->spatialDescription->toArray();
        }
        if( $this->identifiers ) {
          $ab = array();
          foreach( $this->identifiers as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['identifiers'] = $ab;
        }
        return $a;
      }
      

      // initializes this PlaceDescription with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['about']) ) {
          $this->about = $o["about"];
        }
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        $this->names = array();
        if( isset($o['names']) ) {
          foreach( $o['names'] as $i => $x ) {
            $this->names[$i] = new \Org\Gedcomx\Common\TextValue($x);
          }
        }
        if( isset($o['temporalDescription']) ) {
          $this->temporalDescription = new \Org\Gedcomx\Conclusion\DateInfo($o["temporalDescription"]);
        }
        if( isset($o['latitude']) ) {
          $this->latitude = $o["latitude"];
        }
        if( isset($o['longitude']) ) {
          $this->longitude = $o["longitude"];
        }
        if( isset($o['spatialDescription']) ) {
          $this->spatialDescription = new \Org\Gedcomx\Common\ResourceReference($o["spatialDescription"]);
        }
        $this->identifiers = array();
        if( isset($o['identifiers']) ) {
          foreach( $o['identifiers'] as $i => $x ) {
            $this->identifiers[$i] = new \Org\Gedcomx\Conclusion\Identifier($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform {

    // <p>The FamilySearch media types define serialization formats that are specific the FamilySearch developer platform. These
    // media types are extensions of the <a href="http://gedcomx.org">GEDCOM X</a> media types and provide concepts and data types
    // that are specific to FamilySearch and therefore haven't been adopted into a formal, more general specification.</p>
    class FamilySearchPlatform extends \Org\Gedcomx\Gedcomx  {
    
    
      // The child-and-parents relationships for this data set.
      var $childAndParentsRelationships;
      // The discussions included in this data set.
      var $discussions;
      // The source folders included in this data set.
      var $sourceFolders;
      // The users included in this genealogical data set.
      var $users;
      // The merges for this data set.
      var $merges;
      // The merge analysis results for this data set.
      var $mergeAnalyses;

      // constructs a FamilySearchPlatform from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this FamilySearchPlatform
      public function toArray() {
        $a = parent::toArray();
        if( $this->childAndParentsRelationships ) {
          $ab = array();
          foreach( $this->childAndParentsRelationships as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['childAndParentsRelationships'] = $ab;
        }
        if( $this->discussions ) {
          $ab = array();
          foreach( $this->discussions as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['discussions'] = $ab;
        }
        if( $this->sourceFolders ) {
          $ab = array();
          foreach( $this->sourceFolders as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['sourceFolders'] = $ab;
        }
        if( $this->users ) {
          $ab = array();
          foreach( $this->users as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['users'] = $ab;
        }
        if( $this->merges ) {
          $ab = array();
          foreach( $this->merges as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['merges'] = $ab;
        }
        if( $this->mergeAnalyses ) {
          $ab = array();
          foreach( $this->mergeAnalyses as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['mergeAnalyses'] = $ab;
        }
        return $a;
      }
      

      // initializes this FamilySearchPlatform with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        $this->childAndParentsRelationships = array();
        if( isset($o['childAndParentsRelationships']) ) {
          foreach( $o['childAndParentsRelationships'] as $i => $x ) {
            $this->childAndParentsRelationships[$i] = new \Org\Familysearch\Platform\Ct\ChildAndParentsRelationship($x);
          }
        }
        $this->discussions = array();
        if( isset($o['discussions']) ) {
          foreach( $o['discussions'] as $i => $x ) {
            $this->discussions[$i] = new \Org\Familysearch\Platform\Discussions\Discussion($x);
          }
        }
        $this->sourceFolders = array();
        if( isset($o['sourceFolders']) ) {
          foreach( $o['sourceFolders'] as $i => $x ) {
            $this->sourceFolders[$i] = new \Org\Familysearch\Platform\Sources\Folder($x);
          }
        }
        $this->users = array();
        if( isset($o['users']) ) {
          foreach( $o['users'] as $i => $x ) {
            $this->users[$i] = new \Org\Familysearch\Platform\Users\User($x);
          }
        }
        $this->merges = array();
        if( isset($o['merges']) ) {
          foreach( $o['merges'] as $i => $x ) {
            $this->merges[$i] = new \Org\Familysearch\Platform\Ct\Merge($x);
          }
        }
        $this->mergeAnalyses = array();
        if( isset($o['mergeAnalyses']) ) {
          foreach( $o['mergeAnalyses'] as $i => $x ) {
            $this->mergeAnalyses[$i] = new \Org\Familysearch\Platform\Ct\MergeAnalysis($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Familysearch\Platform\Ct {

    // The FamilySearch-proprietary model for a relationship between a child and a pair of parents.
    class ChildAndParentsRelationship extends \Org\Gedcomx\Conclusion\Conclusion  {
    
    
      // The father of the child.
      var $father;
      // The mother of the child.
      var $mother;
      // child in the relationship.
      var $child;
      // The fact conclusions for the father.
      var $fatherFacts;
      // The fact conclusions for the mother.
      var $motherFacts;

      // constructs a ChildAndParentsRelationship from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this ChildAndParentsRelationship
      public function toArray() {
        $a = parent::toArray();
        if( $this->father ) {
          $a["father"] = $this->father->toArray();
        }
        if( $this->mother ) {
          $a["mother"] = $this->mother->toArray();
        }
        if( $this->child ) {
          $a["child"] = $this->child->toArray();
        }
        if( $this->fatherFacts ) {
          $ab = array();
          foreach( $this->fatherFacts as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['fatherFacts'] = $ab;
        }
        if( $this->motherFacts ) {
          $ab = array();
          foreach( $this->motherFacts as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['motherFacts'] = $ab;
        }
        return $a;
      }
      

      // initializes this ChildAndParentsRelationship with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['father']) ) {
          $this->father = new \Org\Gedcomx\Common\ResourceReference($o["father"]);
        }
        if( isset($o['mother']) ) {
          $this->mother = new \Org\Gedcomx\Common\ResourceReference($o["mother"]);
        }
        if( isset($o['child']) ) {
          $this->child = new \Org\Gedcomx\Common\ResourceReference($o["child"]);
        }
        $this->fatherFacts = array();
        if( isset($o['fatherFacts']) ) {
          foreach( $o['fatherFacts'] as $i => $x ) {
            $this->fatherFacts[$i] = new \Org\Gedcomx\Conclusion\Fact($x);
          }
        }
        $this->motherFacts = array();
        if( isset($o['motherFacts']) ) {
          foreach( $o['motherFacts'] as $i => $x ) {
            $this->motherFacts[$i] = new \Org\Gedcomx\Conclusion\Fact($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A name conclusion.
    class Name extends \Org\Gedcomx\Conclusion\Conclusion  {
    
      // The type of the name.
      var $type;
    
      // Whether the conclusion is preferred above other conclusions of the same type. Useful, for example, for display purposes.
      var $preferred;
      // The date the name was first applied or adopted.
      var $date;
      // Alternate forms of the name, such as the romanized form of a non-latin name.
      var $nameForms;

      // constructs a Name from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Name
      public function toArray() {
        $a = parent::toArray();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->preferred ) {
          $a["preferred"] = $this->preferred;
        }
        if( $this->date ) {
          $a["date"] = $this->date->toArray();
        }
        if( $this->nameForms ) {
          $ab = array();
          foreach( $this->nameForms as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['nameForms'] = $ab;
        }
        return $a;
      }
      

      // initializes this Name with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['preferred']) ) {
          $this->preferred = $o["preferred"];
        }
        if( isset($o['date']) ) {
          $this->date = new \Org\Gedcomx\Conclusion\DateInfo($o["date"]);
        }
        $this->nameForms = array();
        if( isset($o['nameForms']) ) {
          foreach( $o['nameForms'] as $i => $x ) {
            $this->nameForms[$i] = new \Org\Gedcomx\Conclusion\NameForm($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A role that a specific person plays in an event.
    class EventRole extends \Org\Gedcomx\Conclusion\Conclusion  {
    
      // The role type.
      var $type;
    
      // Reference to the person playing the role in the event.
      var $person;
      // Details about the role of the person in the event.
      var $details;

      // constructs a EventRole from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this EventRole
      public function toArray() {
        $a = parent::toArray();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->person ) {
          $a["person"] = $this->person->toArray();
        }
        if( $this->details ) {
          $a["details"] = $this->details;
        }
        return $a;
      }
      

      // initializes this EventRole with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['person']) ) {
          $this->person = new \Org\Gedcomx\Common\ResourceReference($o["person"]);
        }
        if( isset($o['details']) ) {
          $this->details = $o["details"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A gender conclusion.
    class Gender extends \Org\Gedcomx\Conclusion\Conclusion  {
    
      // The type of the gender.
      var $type;
    

      // constructs a Gender from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Gender
      public function toArray() {
        $a = parent::toArray();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        return $a;
      }
      

      // initializes this Gender with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A conclusion about a fact applicable to a person or relationship.
    class Fact extends \Org\Gedcomx\Conclusion\Conclusion  {
    
      // The type of the fact.
      var $type;
    
      // The date of applicability of this fact.
      var $date;
      // The place of applicability of this fact.
      var $place;
      // The value as supplied by the user.
      var $value;

      // constructs a Fact from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Fact
      public function toArray() {
        $a = parent::toArray();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->date ) {
          $a["date"] = $this->date->toArray();
        }
        if( $this->place ) {
          $a["place"] = $this->place->toArray();
        }
        if( $this->value ) {
          $a["value"] = $this->value;
        }
        return $a;
      }
      

      // initializes this Fact with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['date']) ) {
          $this->date = new \Org\Gedcomx\Conclusion\DateInfo($o["date"]);
        }
        if( isset($o['place']) ) {
          $this->place = new \Org\Gedcomx\Conclusion\PlaceReference($o["place"]);
        }
        if( isset($o['value']) ) {
          $this->value = $o["value"];
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // A historical event.
    class Event extends \Org\Gedcomx\Conclusion\Conclusion  {
    
      // The type of the event.
      var $type;
    
      // The date of this event.
      var $date;
      // The place of this event.
      var $place;
      // The roles played in this event.
      var $roles;

      // constructs a Event from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Event
      public function toArray() {
        $a = parent::toArray();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->date ) {
          $a["date"] = $this->date->toArray();
        }
        if( $this->place ) {
          $a["place"] = $this->place->toArray();
        }
        if( $this->roles ) {
          $ab = array();
          foreach( $this->roles as $i => $x ) {
            $ab[$i] = $x->toArray();
          }
          $a['roles'] = $ab;
        }
        return $a;
      }
      

      // initializes this Event with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['date']) ) {
          $this->date = new \Org\Gedcomx\Conclusion\DateInfo($o["date"]);
        }
        if( isset($o['place']) ) {
          $this->place = new \Org\Gedcomx\Conclusion\PlaceReference($o["place"]);
        }
        $this->roles = array();
        if( isset($o['roles']) ) {
          foreach( $o['roles'] as $i => $x ) {
            $this->roles[$i] = new \Org\Gedcomx\Conclusion\EventRole($x);
          }
        }
      }
    
    }
    
  }


  namespace Org\Gedcomx\Conclusion {

    // An abstract document that contains derived (conclusionary) text -- for example, a transcription or researcher analysis.
    class Document extends \Org\Gedcomx\Conclusion\Conclusion  {
    
      // The type of the document.
      var $type;
    
      // The document text.
      var $text;

      // constructs a Document from a (parsed) JSON hash
      public function __construct($o = null) {
        if( $o ) {
          $this->initFromArray($o);
        }
      }
    
      // the json hash for this Document
      public function toArray() {
        $a = parent::toArray();
        if( $this->type ) {
          $a["type"] = $this->type;
        }
        if( $this->text ) {
          $a["text"] = $this->text;
        }
        return $a;
      }
      

      // initializes this Document with a json hash
      public function initFromArray($o) {
        parent::initFromArray($o);
        if( isset($o['type']) ) {
          $this->type = $o["type"];
        }
        if( isset($o['text']) ) {
          $this->text = $o["text"];
        }
      }
    
    }
    
  }

  
?>